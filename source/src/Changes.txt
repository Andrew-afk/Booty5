v1.5.9
------
* Added support for radial gradients
* Updated caching
* Added sujpport for pause / resume app detection

v1.5.8
------
* Fixed issue where audio would not work on Android Chrome
* Added a minimal version of FBInstants which can be used to replace FBInstant for deployment to platforms other than Instant Games

v1.5.7
------
* Cache padding fixes

v1.5.6
------
* Tideed up the repo
* Added Dragon Bones module
* Added actions back into the main build by default

v1.5.5
------
* New hit property added to Actors. If true then will be included io hit testing
* New dock_screen property added to Actors. If true then docking will be to screen edge instead of scene edge
* New padding property added to Actors. Text padding (used when caching)
* New scale_method property added to Actors. Scale method used to fit actor to screen
* New draw_reverse property added to Actors. If set to true children are drawn in reverse order
* New _av property added to Actors. This will set active and visible states at the same time
* New method removeAllActors added to Actor which removes all actors from the actors child list
* New getSlot and moveToSlot methods added to Actor which allows you to query a child sort index and modify it
* New overlapsRect method added to Actors which checks for a rect area overlapping the Actors rect area
* New circleOverlaps method added to Actors which checks for a circular area overlapping the Actors circular area
* New circleOverlapsRect method added to Actors which checks for a rect area overlapping the Actors circular area
* New fullCircleOverlapTest method added to Actors which checks for a circular area overlapping the Actors circular area (taking into account transforms)
* New stroke_filled property added to all Actor types which if true will cause stroke will be drawn
* New line_height property added to LabelActor which specifies the height of a line of text
* New _text property added to LabelActor which sets the labels text and updates its cached version if cached
* New deactivate property added to Animations. When set to true deactivates and hides target actor when its done (default false), should only be used with actors
* Many new easinng funnctions added to the animation system
* App canvas_width and canvas_height now known as design_width and design_width
* Fonts now added to the app as resources, the underlying font loaded uses the FontObserver lib to load fonts
* Raw JSON resource type now added to the App
* New started property added to the App which is a callback that will be called when the app starts
* All App resource containers are now objecsts instead of arrays
* App waitForResources now calls a supplied callback to alert the user of progress during loading
* App main logic loop is now ran on requestAnimationFrame
* New draw_reverse property added to Scenes. If set to true children are drawn in reverse order
* New _av property added to Scebes. This will set active and visible states at the same time
* Added new Task type called TaskQ which is a collection of tasks that are ran serial. Only the first task in the queue is ran, once that tasks is complete the next task in the queue is ran.
* Resources now checked for load failure and attempt to reload a number of times before giving up
* Value passed to Actor _atlas can be an atlas ojbect or the name of an image atlas brush
* Calling playAnim or playTimeline on an inactive or invisible Actor will make acivate it and make it visible
* Hit tests are no longer carried out on inactive Actors
* Fixed Actor _scale property so that it now updates the main transform
* Fixed virtual Actor margins
* Action lists are now optional component and not included by default
* Support for Facebook Instant Games added

v1.5.4
------
* frames_repeat added to actotr which allows bitmap anim to repeat
* Actor.playTimeline() shortcut added for playing timelines
* Actor.TweenTo() and TweenToWithEnd() utility methods added to allow easy creation of tweens
* Actor.TweenToMany() utility method added to allow easy creation of multiple tweens
* Actor.addTask() / removeTask() shortcut added for adding and removing tasks from actors
* Added delay property to animations to allow then to be delayed
* Added Animation.setRelative() method to allow animations to be marked as relative to their original values
* Timeline now has new setRelative(), setRepeats(), setDelay() and changeTarget() methods
* TimelineManager now has setRepeats() and changeTarget() methods
* App now has new prevent_default property which can be used to allow or prevent mouse input reaching other elements on the page
* App.addTask() / removeTask() shortcut added for adding and removing tasks from the global app
* App.fill_screen property added which when set will bypass all scaling methods and simply scale the canvas to the window size
* Scene.addTask() / removeTask() shortcut added for adding and removing tasks from the scene
* Scene.playTimeline() shortcut added for playing timelines in the scene
* Added b5.Utils.RunafterTime() which allows you ot run a function after a delay (uses global app task manager)
* Low resolution canvas scaling issue fixed on retina displays

v1.5.3
------
* Fixed issue where absolute origin was not being set correctly from actors imported via XOML

v1.5.2
------
* Added support for events and event notification (see b5.EventsManager)
* Added support for tasks (see b5.TasksManager)
* Added support to brushes for animation sets
* Added support to actors for working with brush animation sets (see b5.Actor.playAnim)
* Bitmap based actors now support trimmed atlas images
* Image based actors that use an atlas will use the size of the atlas frame, can be overriden by setting ignore_atlas_size to true
* Removed support for web Marmalade
* All booty5 scene data is now loaded into the b5.data space instead of window
* Xoml data property names have been minified to greatly cut down Xoml datas format storage size
* Added polyfill for RequestAnimationFrame

v1.5.1
------
* Removed support for resize and orientation changed checks in app
* Canvas now rescaled when a change in client size is detected
* Client size is now taken from document and not window
* devicePixelRatio support removed

v1.5
----
* Modified b5.Utils.loadJSON to work with node-webkit
* Added new screen fit modes to app
* Throw an exception when Scene.addResource() called without a resource type

v1.4.9
------
* b5.Xoml.loadJSON now accepts 4th parameter which can be used to stipulate loaded data should be returned as binary buffer
* b5.App.use_web_audio property added which can be used to switch on support for Web Audio if it is supported
* b5.Xoml.loadJSON moved to b5.Utils.loadJSON
* b5.Xoml.loadJS moved to b5.Utils.loadJS
* Added support for web audio API to sound (default is enabled). To disable Web Audio set b5.App.use_web_audio to false. If web audio is not supported then it will fallback to HTML5 Audio
* b5.App constructor now accepts a second parameter which enables / disables web audio support
* Added b5.Sound.auto_play property to enable auto playback of sounds after they are loaded

v1.4.8
------
* JSDoc documentation added
* b5.App.canvas_fill_window removed
* Modified how the render scaling and canvas resizing works to make it easier to use.

v1.4.7
------
* Added new property to Actor called round_pixels, when set to true vertices will be rounded to integer which can speed up rendering significantly
* Added support for collision flags to physics fixtures (category, mask and group index)

v1.4.6
------
* Added new actor type called MapActor which can render tiled maps
* Support added to Xoml for loading Booty5 game editor exported tile maps
* Fix: Actor.vr wasn't updating transform

v1.4.5
------
* Bitmap.onload callback now passed the bitmap as the first parameter to the callback
* Actor.addFixture() now also accepts an options object that contains a material and a shape
* points, convexPoints abd radius passed to Actor.addFixture() options renamed to vertices, convexVertices and width respectively
* Timeline.add() can now accept single parameter which is animation instance to add
* Fix: Actor docking
* Fix: Scene.removeResource() and App.removeResource()
* Fix: Scene.addResource() and App.addResource() was not storing parent container
* Fix: Removed duplicate TimelineManager code from Timeline, school boy type error!

v1.4.4
------
* Code restructured
* All classes moved into the b5 namespace
* TheApp class renamed to App
* window.app replaced with b5.app
* Added new property to App called canvas_fill_window which when set to false will prevent the canvas from being resized to fit window
* Added support for sequential and concurrent actions to app, actors and scenes via ActionsListManager and ActionsList classes
* Large collection of pre-defined actions added:
  * A_ChangeActions
  * A_CreateExplosion
  * A_CreatePlume
  * A_ChangeTimeline
  * A_AttractX
  * A_AttractY
  * A_Attract
  * A_Sound
  * A_CamStopMove
  * A_CamGravity
  * A_CamMove
  * A_CamMoveTo
  * A_CamFollow
  * A_CamFollowPath
  * A_CamFollowPathVel
  * A_CamLimitMove
  * A_Wait
  * A_SetProps
  * A_AddProps
  * A_TweenProps
  * A_Call
  * A_Create
  * A_Destroy
  * A_FocusScene
  * A_StopMove
  * A_Gravity
  * A_Move
  * A_MoveTo
  * A_MoveWithSpeed
  * A_Follow
  * A_LookAt
  * A_FollowPath
  * A_FollowPathVel
  * A_LimitMove
  * A_SetLinearVelocity
  * A_SetAngularVelocity
  * A_ApplyForce
  * A_ApplyImpulse
  * A_ApplyTorque
* Actor.setPositionPhysics() deprecated, use setPosition instead
* Actor.setRotationPhysics deprecated, use setRotation instead
* Moved getResFromType() out of App and Scene classes into common Utils class
* Added new Utils.findObjectFromPath() and Utils.resolveObject() which can be used to find actors, scenes, action lists and timelines from a path such as gamescene.actor1.timeline1
* Added new Utils.findResourceFromPath() and Utils.resolveResource() which can be used to find resources from a path such as gamescene.sound1
* Added new _atlas, _bitmap, _clip_shape properties to Actor that can use resource paths as well as instances of resources
* Added new _clip_shape property to Scene that can use resource paths as well as instances of resources
* Added new _focus_scene and _focus_scene2 properties to App that can use resource paths as well as instances of resources
* Added vx_damping and vy_damping to scene camera
* Updated Xoml.js to load new actions lists from Booty5 editor exported JSON format
* generateExplosion, generatePlume and generateRain now also accept string version of type
* Logic and rendering decoupled. Logic (app.mainLogic) now ran on timer at default 60 fps whilst and rendering (app.mainDraw) at max frame rate
* Fix: Animation.Update() locks up when only a single key frame is specified
* Fix: "none" rescaling method was not working correctly
* Fix: Box2D forces applied in Actor OnTick were not being applied

v1.4.3
------
* Colour used instead of TextColour in Xoml loader for loading text fill style
* Fix: Object origins

v1.4.2
------
* Actors now have their own local timelines manager, actor local animations should now be added here instead of the parent scenes timeline manager
* TheApp has new property total_loaded which stacks total pre-loadable number of resources that have been loaded
* TheApp has new property total_load_errors which denotes total number of resources that have not loaded due to error
* TheApp has new event handler onResourceLoaded which can be used to detect when a file has been loaded. Note that by default this method calls onResourceLoadedBase(resource, error) which updates TheApp's internals. If you override this then ensure that you call TheApp.onResourceLoadedBase()
* TheApp has new method countResourcesNeedLoading() which counts how many resources need loading
* TheApp has new method waitForResources() which will delay start of the app until all global and loaded scene resources are loaded. It was also display a loading.png (if present) and display a percentage loading bar. TheApp.loading_screen define properties of the loading screen
* TheApp areResourcesLoaded method removed
* Sound class has preload property which when set will preload the sound
* Sound and Bitmap classes now notify app when they have loaded or there was an error during load
* Sound has new method load() which will load the sound effect
* Timeline and TimelineManager classes now have find(name) method that allows searching for named animations and timelines
* New property added to Animation called tween, when set to false frames will not be tweened. This also enables none numeric discreet values to be tweened
* New name property added to Animation class
* Xoml loader now loads timeline animations exported from Booty5 editor
* Added new demo called Timeline Animations which demonstrates the use of timeline animation
* Fix: Actor transform was being updated every frame
* Fix: Actor children transforms were not getting updated correctly when parent transform was updating
* Fix: Touch input now works on Windows Phone 8


v1.4.1
------
* Added new property to Actor called merge_cache which when set to true will attempt to merge the actors rendering into a suitable parents cache. Note that once an actor has been merged into its parent its visual properties cannot be modified
* Add new property to TheApp called focus_scene2 which sets a 2nd scene as focus, this scene will be used for touch events if the first main focus scene does not respond to them
* Added support for fallback sound to Sound class via location2
* Added new min_panning property to Scene. This will prevent panning being marked as true if the movement distance squared is below this value
* Sound now supports looping via Sound.loop
* All Xoml parse functions now return the created object
* New Xoml.findResource() added which searched a Xoml resource collection for the named resource
* Fixed issue where Actor.current_frame was going out of bounds
* Fixed polygonActor gradient fill
* Examples updated
* New "Create Objects from Template" and "List Menu" demos added

v1.4
----
* Added new Actor setPositionPhysics() and setRotationPhysics() to set associated physics body position and rotation directly
* Added new utils class that contains utility functions
* Fixed actor and scene sorting using new sorting method in Utils called sortLayers()
* Added new property to TheApp called use_marm which should be set to true if deploying to mobile using the Marmalade SDK
* Added new property to Sound constructor called reuse which can be used to force the sound effect to be reused (only useful for short sound effects at may not play if one is already playing)
* Added new stop / pause methods to Sound class, only usable with reusable sounds
* Sound class will now use the powerful Marmalade audio system instead of standard, if its available
* Added new method TheApp.parseAndSetFocus(scene_name) which parses xoml JSON and sets the named scene as the current scene
* TimelineManager.add() now returns the timeline that was added
* Scene.addActor() now returns the added actor
* Actor.addActor() now returns the added actor
* TheApp.addScene() now returns the added scene
* ParticleActor.addParticle() now returns the added particle
* Main loop timer replaced with requestAnimationFrame for smoother rendering
* TheApp now measures average frame rate via avg_fps property
* TheApp has new property called adaptive_physics which will run physics update multiple times within a single frame if frame rate falls considerably outside target frame rate
* Actors can now all be cached by setting cache property to true. When cached the actor will be rendered only once to an off screen canvas, subsequent rendering will be of the cached version. note that the Size of the actor as specified by its properties will determine the size of the cached canvas area. In the case of unfilled actors, the allocated size will be slightly larger to allow for stroke thickness. Note that shadows and composite operations are not cached

v1.3.9
------
* Added support for gradients to unfilled shapes
* Removed gradient angle property and replaced with gradient start and gradient end points
* Added support for text gradients
* Moved gradient style creation out of Xoml class and into Gradient class

v1.3.8
------
* Added support for wheel joint
* Added panning property to Scene to determine when the scene is being touch panned
* Box2D begin and end contact callbacks now call both objects that were affected
* Added corner_radius property to rectActor to render rounded rects
* Added support for stroke colour and thickness to rect, arc, polygon and label actors
* Added support for scene and actor layer ordering. Set layer via _layer property and not layer variable to ensure that re-sorting takes place
* Added new shadow properties all actor types (shadow, shadow_x, shadow_y, shadow_colour, shadow_blur)
* Added support for composite operations to actors
* Added support for Scene onKeyPres, onKeyDown and onKeyUp events
* Added new demos keys, mouse joint and bitmap animation
* Added new Gradient class that handles gradient brushes
* Rect, Arc and Polygon actors can now render gradient brushes at any angle, angle is specified by new grad_rotation property

v1.3.7
------
* Updated Xoml.loadJSON() to work without JQuery
* Added support for storing concave polygons as separate convex polygons to shape
* Updated Xoml loader and Actor.addFixture() to utilise multiple convex fixtures from a single shape

v1.3.6
------
* Xoml.js now loads Actor.onLostTouchFocus event
* Fixed issue with actor clipping causing degradation and flickering
* Fixed actor origins

v1.3.4
------
* Removed CanvasActor and rolled into Actor. To give an actor a virtual canvas call makeVirtual() on the actor
* Fixed bug in App.cleanupDestroyedScenes() that was preventing removed scenes from being cleaned up
* Added new array property to Actor called anim_frames that enables specification of an array of bitmap animation frame indices
* ImageAtlas.generate() has new optional param that allows you to specify total number of frames to generate
* Geometry class has been removed and rolled into the Shape class
* Added new property to Actor called clip_shape which enables the actor and its children to clip against arbitrary shapes
* Added new property to Actor called self_clip which when set to true will clip the actor against its own clipping shape
* If ParticleActor.onParticleLost() returns false then the particle will not be destroyed
* All resources now contain parent container property
* All resources now have destroy() method that removes them from their container and destroys them
* Bitmap constructor now accepts optional 4th parameter that is a callback function that will be called when the image has been loaded
* Scene.areResourcesLoaded() added to scene which will return true if all scene resources have been loaded
* TheApp.areResourcesLoaded(include_scenes) added to TheApp which will return true if all scene resources have been loaded, if include_scenes is true then all scenes will also be checked


v1.3.3
---------
* Updated comments and added examples
* Modified engine so that Box2D can be safely excluded if not needed
* TheApp now supports dynamic canvas calling to fit the canvas to the browsers client area, supports scale to fit to x-y axis or resize to client area, see TheApp.canvas_scale_method. TheApp.setCanvasScalingMethod can be used to change method
* Added new functions to TheApp, Scene and Actor that can dirty all transforms and force an update
* TheApp now stores canvas size (canvas_width, canvas_height), display size (display_width, display_height), canvas scale and centre points and device pixel ratio (pixel_ratio)
* TheApPp now has touch_supported property that  is set to true if touch is supported
* TheApp now has new property called dt which represents the time passed since the last frame was updated
* ImageAtlas generation now supports start x and y position which enables an image offset to be specified
* Xoml loader now supports text_align, text_baseline and fill_stye properties
* Added Actor._scale property
* Added Actor.changeParent(actor, parent) that enables actors to be moved from one parent to another
* Added Actor.findFirstParent() which finds the first Actor based parent
* Added Actor.transformPoint() that ca be used to transform a point into the actors coordinate system
* ParticleActor.add() has a 5th parameter called orphaned, if set to true then the particle will be added to the scene and not the particle actor


v1.3
---------
* Added more comments
* Actor setters now only dirty transform if a change is made
* Actor.findActorDeep() removed
* Actor.findActor() has additional parameter that allows recursive searching
* Actor.sendToBack() added
* Actor.addFixture() now returns the created fixture
* Actor.addJoint() now returns the created joint
* Scenes now active property which can be used to pause processing
* Scenes will now still be processed when not visible
* Scene.findActorDeep() removed
* Scene.findActor() has additional parameter that allows recursive searching
* Scene.sendToBack() added

v1.2
---------
* GSAP dependency removed
* JQuery dependency removed
* Support for actor hierarchies added
* Support for physics joints added to actors
* Opacity for actors and scenes added
* Actors now support 3D depth property
* Actors now have support for onCreate and onDestroy event handlers
* Actors now support box, circle and polygon shaped fixtures
* Fixtures can now be marked as sensors
* Actors and Scenes can now clip their children against box, circle and polygon cliopping shapes
* Actors and Scenes now have separate active and visible states
* Actors now have a simple physics system that is used on Actors that are not under control of Box2D
* Actors can be docked to the edged of the display as well as to the edges of canvas actors
* Actors can now ignore scene camera movement
* Actors now support onCollisionStart and onCollisionEnd events
* Child actors can now bubble events up to parents
* Scene camera can track actors
* Scenes now support touch panning
* New actor types added:
  * ArcActor - Displays arcs / circles
  * CanvasActor - A UI actor that can arrange, scroll around and dock its content
  * ParticleActor - An actor that is a particle system
  * Polygon Actor - An actor that displays polygon shapes
  * RedctActor - An actor that displays rectangle shapes
* Support for timeline key frame based tween animations added
* Support for various types of resources added on a global or scene local level, including:
  * Shapes - Used by clipping and physics systems
  * Geometries - Used by rendering system to render geometries
  * Brushes - Used to create sprite atlases / bitmap animation
  * Sounds - used to play back audio
  * Materials - Used to define physics materials
* Full support for the Goji Editor added, including XOML loader
